{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport * as commander from 'commander';\n\nimport {diff} from './commands/diff';\nimport {validate} from './commands/validate';\nimport {similar} from './commands/similar';\nimport {serve} from './commands/serve';\nimport {coverage} from './commands/coverage';\nimport {ui} from './commands/ui';\nimport {introspect} from './commands/introspect';\nimport {normalizeOptions} from './utils/options';\n\nfunction collect<T>(val: T, memo: T[]) {\n  memo.push(val);\n\n  return memo;\n}\n\nfunction collectObject(val: string, memo: Record<string, string>) {\n  if (/^[^\\:]+\\:/i.test(val)) {\n    const splitAt = val.indexOf(':');\n    const key = val.substring(0, splitAt).trim();\n    const value = val.substring(splitAt + 1).trim();\n\n    memo[key] = value;\n  }\n\n  return memo;\n}\n\ncommander.option('-r, --require [require]', 'Require modules', collect, []);\ncommander.option('-t, --token <s>', 'Access Token');\ncommander.option('-h, --header <s>', 'HTTP Headers', collectObject, {});\n\nconst defaultPort = 4000;\n\ncommander\n  .command('ui')\n  .description('Serves a GUI')\n  .option('-p, --port <n>', 'Run on a specific port', defaultPort)\n  .action((cmd: commander.Command) =>\n    ui({\n      port: cmd.port,\n    }),\n  );\n\ncommander\n  .command('diff <old> <new>')\n  .description('Diff two schemas')\n  .action((oldSchema: string, newSchema: string, cmd: commander.Command) =>\n    diff(oldSchema, newSchema, normalizeOptions(cmd)),\n  );\n\ncommander\n  .command('validate <documents> <schema>')\n  .option('-d, --deprecated', 'Fail on deprecated usage', false)\n  .option(\n    '--noStrictFragments',\n    'Do not fail on duplicated fragment names',\n    false,\n  )\n  .option('--maxDepth <n>', 'Fail on deep operations', (val: string) =>\n    parseInt(val, 10),\n  )\n  .description('Validate documents against a schema')\n  .action((documents: string, schema: string, cmd: commander.Command) =>\n    validate(documents, schema, normalizeOptions(cmd)),\n  );\n\ncommander\n  .command('similar <schema>')\n  .option('-n, --type <s>', 'Name of a type')\n  .option('-t, --threshold <n>', 'Threshold of similarity ratio', parseFloat)\n  .option('-w, --write <s>', 'Write a file with stats')\n  .description('Find similar types in a schema')\n  .action((schema: string, cmd: commander.Command) =>\n    similar(schema, cmd.type, cmd.threshold, normalizeOptions(cmd)),\n  );\n\ncommander\n  .command('serve <schema>')\n  .description('Serves a GraphQL API with Playground')\n  .action((schema: string, cmd: commander.Command) =>\n    serve(schema, normalizeOptions(cmd)),\n  );\n\ncommander\n  .command('coverage <documents> <schema>')\n  .option('-s, --silent', 'Do not render any stats in the terminal')\n  .option('-w, --write <s>', 'Write a file with coverage stats')\n  .description('Schema coverage based on documents')\n  .action((documents: string, schema: string, cmd: commander.Command) =>\n    coverage(documents, schema, normalizeOptions(cmd)),\n  );\n\ncommander\n  .command('introspect <schema>')\n  .option('-w, --write <s>', 'Write to a file')\n  .description('Introspect a schema')\n  .action((schema: string, cmd: commander.Command) =>\n    introspect(schema, normalizeOptions(cmd)),\n  );\n\ncommander.command('*').action(() => commander.help());\n\ncommander.parse(process.argv);\n\nif (process.argv.length === 2) {\n  ui({\n    port: defaultPort,\n  }).catch(e => {\n    console.log(e);\n    process.exit(1);\n  });\n}\n"]}