#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var commander = require("commander");
var diff_1 = require("./commands/diff");
var validate_1 = require("./commands/validate");
var similar_1 = require("./commands/similar");
var serve_1 = require("./commands/serve");
var coverage_1 = require("./commands/coverage");
var ui_1 = require("./commands/ui");
var introspect_1 = require("./commands/introspect");
var options_1 = require("./utils/options");
function collect(val, memo) {
    memo.push(val);
    return memo;
}
function collectObject(val, memo) {
    if (/^[^\:]+\:/i.test(val)) {
        var splitAt = val.indexOf(':');
        var key = val.substring(0, splitAt).trim();
        var value = val.substring(splitAt + 1).trim();
        memo[key] = value;
    }
    return memo;
}
commander.option('-r, --require [require]', 'Require modules', collect, []);
commander.option('-t, --token <s>', 'Access Token');
commander.option('-h, --header <s>', 'HTTP Headers', collectObject, {});
var defaultPort = 4000;
commander
    .command('ui')
    .description('Serves a GUI')
    .option('-p, --port <n>', 'Run on a specific port', defaultPort)
    .action(function (cmd) {
    return ui_1.ui({
        port: cmd.port,
    });
});
commander
    .command('diff <old> <new>')
    .description('Diff two schemas')
    .action(function (oldSchema, newSchema, cmd) {
    return diff_1.diff(oldSchema, newSchema, options_1.normalizeOptions(cmd));
});
commander
    .command('validate <documents> <schema>')
    .option('-d, --deprecated', 'Fail on deprecated usage', false)
    .option('--noStrictFragments', 'Do not fail on duplicated fragment names', false)
    .option('--maxDepth <n>', 'Fail on deep operations', function (val) {
    return parseInt(val, 10);
})
    .description('Validate documents against a schema')
    .action(function (documents, schema, cmd) {
    return validate_1.validate(documents, schema, options_1.normalizeOptions(cmd));
});
commander
    .command('similar <schema>')
    .option('-n, --type <s>', 'Name of a type')
    .option('-t, --threshold <n>', 'Threshold of similarity ratio', parseFloat)
    .option('-w, --write <s>', 'Write a file with stats')
    .description('Find similar types in a schema')
    .action(function (schema, cmd) {
    return similar_1.similar(schema, cmd.type, cmd.threshold, options_1.normalizeOptions(cmd));
});
commander
    .command('serve <schema>')
    .description('Serves a GraphQL API with Playground')
    .action(function (schema, cmd) {
    return serve_1.serve(schema, options_1.normalizeOptions(cmd));
});
commander
    .command('coverage <documents> <schema>')
    .option('-s, --silent', 'Do not render any stats in the terminal')
    .option('-w, --write <s>', 'Write a file with coverage stats')
    .description('Schema coverage based on documents')
    .action(function (documents, schema, cmd) {
    return coverage_1.coverage(documents, schema, options_1.normalizeOptions(cmd));
});
commander
    .command('introspect <schema>')
    .option('-w, --write <s>', 'Write to a file')
    .description('Introspect a schema')
    .action(function (schema, cmd) {
    return introspect_1.introspect(schema, options_1.normalizeOptions(cmd));
});
commander.command('*').action(function () { return commander.help(); });
commander.parse(process.argv);
if (process.argv.length === 2) {
    ui_1.ui({
        port: defaultPort,
    }).catch(function (e) {
        console.log(e);
        process.exit(1);
    });
}
//# sourceMappingURL=index.js.map