"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logSymbols = require("log-symbols");
var chalk_1 = require("chalk");
var indent = require("indent-string");
var core_1 = require("@graphql-inspector/core");
function getSymbol(level) {
    var _a;
    var symbols = (_a = {},
        _a[core_1.CriticalityLevel.Dangerous] = logSymbols.warning,
        _a[core_1.CriticalityLevel.Breaking] = logSymbols.error,
        _a[core_1.CriticalityLevel.NonBreaking] = logSymbols.success,
        _a);
    return symbols[level];
}
exports.getSymbol = getSymbol;
function renderChange(change) {
    return [getSymbol(change.criticality.level), bolderize(change.message)];
}
exports.renderChange = renderChange;
function bolderize(msg) {
    var findSingleQuotes = /\'([^']+)\'/gim;
    var findDoubleQuotes = /\"([^"]+)\"/gim;
    return msg
        .replace(findSingleQuotes, function (_, value) { return chalk_1.default.bold(value); })
        .replace(findDoubleQuotes, function (_, value) { return chalk_1.default.bold(value); });
}
exports.bolderize = bolderize;
function renderInvalidDocument(invalidDoc) {
    var errors = invalidDoc.errors
        .map(function (e) { return " - " + bolderize(e.message); })
        .join('\n');
    return [
        chalk_1.default.redBright('error'),
        "in " + invalidDoc.source.name + ":\n\n",
        errors,
        '\n\n',
    ];
}
exports.renderInvalidDocument = renderInvalidDocument;
function renderDeprecatedUsageInDocument(invalidDoc, isCritical) {
    if (isCritical === void 0) { isCritical = false; }
    var deprecated = invalidDoc.deprecated
        .map(function (e) { return " - " + bolderize(e.message); })
        .join('\n');
    return [
        isCritical ? chalk_1.default.redBright('error') : chalk_1.default.yellowBright('warn'),
        "in " + invalidDoc.source.name + ":\n\n",
        deprecated,
        '\n\n',
    ];
}
exports.renderDeprecatedUsageInDocument = renderDeprecatedUsageInDocument;
var ConsoleRenderer = /** @class */ (function () {
    function ConsoleRenderer() {
    }
    ConsoleRenderer.prototype.emit = function () {
        var msgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msgs[_i] = arguments[_i];
        }
        console.log.apply(console, msgs);
    };
    ConsoleRenderer.prototype.coverage = function (coverage) {
        this.success('Schema coverage based on documents:\n');
        for (var typeName in coverage.types) {
            if (coverage.types.hasOwnProperty(typeName)) {
                var typeCoverage = coverage.types[typeName];
                this.emit(chalk_1.default.grey(core_1.getTypePrefix(typeCoverage.type)), chalk_1.default.bold("" + typeName), chalk_1.default.grey('{'));
                for (var childName in typeCoverage.children) {
                    if (typeCoverage.children.hasOwnProperty(childName)) {
                        var childCoverage = typeCoverage.children[childName];
                        if (childCoverage.hits) {
                            this.emit(indent(childName, 2), chalk_1.default.italic.grey("x " + childCoverage.hits));
                        }
                        else {
                            this.emit(chalk_1.default.redBright(indent(childName, 2)), chalk_1.default.italic.grey('x 0'));
                        }
                    }
                }
                this.emit(chalk_1.default.grey('}\n'));
            }
        }
    };
    ConsoleRenderer.prototype.success = function () {
        var msgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msgs[_i] = arguments[_i];
        }
        console.log("\n" + chalk_1.default.greenBright('success') + " " + msgs.join(' '));
    };
    ConsoleRenderer.prototype.error = function () {
        var msgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msgs[_i] = arguments[_i];
        }
        console.log("\n" + chalk_1.default.redBright('error') + " " + msgs.join(' '));
    };
    return ConsoleRenderer;
}());
exports.ConsoleRenderer = ConsoleRenderer;
//# sourceMappingURL=render.js.map