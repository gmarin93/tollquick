"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
function pipe() {
    var middlewares = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        middlewares[_i] = arguments[_i];
    }
    return function (value) {
        return middlewares.reduce(function (val, fn) { return fn(val); }, value);
    };
}
exports.pipe = pipe;
function useRequire(options) {
    if (options.require) {
        options.require.forEach(function (mod) { return require(mod); });
    }
    return options;
}
exports.useRequire = useRequire;
function normalizeToken(options) {
    return __assign({}, options, { token: options.parent.token });
}
function normalizeHeaders(options) {
    return __assign({}, options, { headers: typeof options.parent.header === 'undefined' ? {} : options.parent.header });
}
function normalizeRequire(options) {
    if (typeof options.parent.require === 'undefined') {
        return __assign({}, options, { require: [] });
    }
    var normalized = Array.isArray(options.parent.require)
        ? options.parent.require
        : [options.parent.require];
    return __assign({}, options, { require: normalized });
}
function normalizeOptions(options) {
    return pipe(normalizeHeaders, normalizeRequire, useRequire, normalizeToken)(options);
}
exports.normalizeOptions = normalizeOptions;
//# sourceMappingURL=options.js.map