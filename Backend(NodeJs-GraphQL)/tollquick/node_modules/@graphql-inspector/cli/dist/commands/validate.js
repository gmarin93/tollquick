"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@graphql-inspector/core");
var load_1 = require("@graphql-inspector/load");
var render_1 = require("../render");
function validate(documentsPointer, schemaPointer, options) {
    return __awaiter(this, void 0, void 0, function () {
        var renderer, schema, documents, invalidDocuments, errorsCount, deprecated, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    renderer = options.renderer || new render_1.ConsoleRenderer();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, load_1.loadSchema(schemaPointer, {
                            headers: options.headers,
                        })];
                case 2:
                    schema = _a.sent();
                    return [4 /*yield*/, load_1.loadDocuments(documentsPointer)];
                case 3:
                    documents = _a.sent();
                    invalidDocuments = core_1.validate(schema, documents, {
                        strictFragments: !options.noStrictFragments,
                        maxDepth: options.maxDepth || undefined,
                    });
                    if (!invalidDocuments.length) {
                        renderer.success('All documents are valid');
                    }
                    else {
                        errorsCount = countErrors(invalidDocuments);
                        deprecated = countDeprecated(invalidDocuments);
                        if (errorsCount) {
                            renderer.emit("\nDetected " + errorsCount + " invalid document" + (errorsCount > 1 ? 's' : '') + ":\n");
                            invalidDocuments.forEach(function (doc) {
                                if (doc.errors.length) {
                                    renderer.emit.apply(renderer, render_1.renderInvalidDocument(doc));
                                }
                            });
                        }
                        else if (!options.deprecated) {
                            renderer.success('All documents are valid');
                        }
                        if (deprecated) {
                            renderer.emit("\nDetected " + deprecated + " document" + (deprecated > 1 ? 's' : '') + " with deprecated fields:\n");
                            invalidDocuments.forEach(function (doc) {
                                if (doc.deprecated.length) {
                                    renderer.emit.apply(renderer, render_1.renderDeprecatedUsageInDocument(doc, options.deprecated));
                                }
                            });
                        }
                        if (errorsCount || (deprecated && options.deprecated)) {
                            process.exit(1);
                        }
                    }
                    return [3 /*break*/, 5];
                case 4:
                    e_1 = _a.sent();
                    renderer.error(e_1.message || e_1);
                    process.exit(1);
                    return [3 /*break*/, 5];
                case 5:
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
exports.validate = validate;
function countErrors(invalidDocuments) {
    if (invalidDocuments.length) {
        return invalidDocuments.filter(function (doc) { return doc.errors && doc.errors.length; })
            .length;
    }
    return 0;
}
function countDeprecated(invalidDocuments) {
    if (invalidDocuments.length) {
        return invalidDocuments.filter(function (doc) { return doc.deprecated && doc.deprecated.length; }).length;
    }
    return 0;
}
//# sourceMappingURL=validate.js.map