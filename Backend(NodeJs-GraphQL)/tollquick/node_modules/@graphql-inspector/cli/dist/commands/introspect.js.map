{"version":3,"file":"introspect.js","sourceRoot":"","sources":["../../src/commands/introspect.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAmD;AACnD,yBAAiC;AACjC,6BAAsC;AAEtC,oCAAoD;AACpD,mCAA6D;AAE7D,SAAsB,UAAU,CAC9B,aAAqB,EACrB,OAMC;;;;;;oBAEK,MAAM,GAAG,OAAO,CAAC,KAAK,IAAI,qBAAqB,CAAC;oBAChD,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,IAAI,wBAAe,EAAE,CAAC;;;;oBAG1C,qBAAM,iBAAU,CAAC,aAAa,EAAE;4BAC7C,KAAK,EAAE,OAAO,CAAC,KAAK;4BACpB,OAAO,EAAE,OAAO,CAAC,OAAO;yBACzB,CAAC,EAAA;;oBAHI,MAAM,GAAG,SAGb;oBACI,aAAa,GAAG,iCAAuB,CAAC,MAAM,CAAC,CAAC;oBAChD,QAAQ,GAAG,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;oBAC5C,OAAO,SAAQ,CAAC;oBAEpB,QAAQ,cAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAAE;wBACrC,KAAK,UAAU,CAAC;wBAChB,KAAK,MAAM,CAAC;wBACZ,KAAK,OAAO,CAAC;wBACb,KAAK,WAAW;4BACd,OAAO,GAAG,qBAAW,CAAC,MAAM,EAAE;gCAC5B,mBAAmB,EAAE,IAAI;6BAC1B,CAAC,CAAC;4BACH,MAAM;wBACR,KAAK,OAAO;4BACV,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;4BACjD,MAAM;wBACR;4BACE,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;qBACxE;oBAED,kBAAa,CAAC,MAAM,EAAE,OAAQ,EAAE;wBAC9B,QAAQ,EAAE,OAAO;qBAClB,CAAC,CAAC;oBAEH,QAAQ,CAAC,OAAO,CAAC,cAAY,QAAU,CAAC,CAAC;oBACzC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;oBAEhB,QAAQ,CAAC,KAAK,CAAC,GAAC,CAAC,OAAO,IAAI,GAAC,CAAC,CAAC;oBAC/B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;oBAGlB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;;CACjB;AAlDD,gCAkDC","sourcesContent":["import {loadSchema} from '@graphql-inspector/load';\nimport {writeFileSync} from 'fs';\nimport {resolve, extname} from 'path';\n\nimport {Renderer, ConsoleRenderer} from '../render';\nimport {introspectionFromSchema, printSchema} from 'graphql';\n\nexport async function introspect(\n  schemaPointer: string,\n  options: {\n    token?: string;\n    write?: string;\n    require?: string[];\n    renderer?: Renderer;\n    headers?: Record<string, string>;\n  },\n) {\n  const output = options.write || 'graphql.schema.json';\n  const renderer = options.renderer || new ConsoleRenderer();\n\n  try {\n    const schema = await loadSchema(schemaPointer, {\n      token: options.token,\n      headers: options.headers,\n    });\n    const introspection = introspectionFromSchema(schema);\n    const filepath = resolve(process.cwd(), output);\n    let content: string;\n\n    switch (extname(output.toLowerCase())) {\n      case '.graphql':\n      case '.gql':\n      case '.gqls':\n      case '.graphqls':\n        content = printSchema(schema, {\n          commentDescriptions: true,\n        });\n        break;\n      case '.json':\n        content = JSON.stringify(introspection, null, 2);\n        break;\n      default:\n        throw new Error('Only .graphql, .gql and .json files are supported');\n    }\n\n    writeFileSync(output, content!, {\n      encoding: 'utf-8',\n    });\n\n    renderer.success(`Saved to ${filepath}`);\n    process.exit(0);\n  } catch (e) {\n    renderer.error(e.message || e);\n    process.exit(1);\n  }\n\n  process.exit(0);\n}\n"]}