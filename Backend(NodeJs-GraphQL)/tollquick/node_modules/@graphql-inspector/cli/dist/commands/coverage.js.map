{"version":3,"file":"coverage.js","sourceRoot":"","sources":["../../src/commands/coverage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA6C;AAC7C,yBAAiC;AACjC,6BAA6B;AAC7B,gDAGiC;AACjC,gDAAkE;AAElE,kCAA2C;AAC3C,oCAAoD;AAEpD,SAAgB,UAAU,CAAC,QAAwB;IACjD,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAC3C,CAAC;AAFD,gCAEC;AAED,SAAsB,QAAQ,CAC5B,gBAAwB,EACxB,aAAqB,EACrB,OAMC;;;;;;oBAEK,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,IAAI,wBAAe,EAAE,CAAC;oBACrD,MAAM,GAAG,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC;oBACjC,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC;oBAC1B,WAAW,GAAG,OAAO,SAAS,KAAK,WAAW,CAAC;;;;oBAGpC,qBAAM,iBAAU,CAAC,aAAa,EAAE;4BAC7C,OAAO,EAAE,OAAO,CAAC,OAAO;yBACzB,CAAC,EAAA;;oBAFI,MAAM,GAAG,SAEb;oBACgB,qBAAM,oBAAa,CAAC,gBAAgB,CAAC,EAAA;;oBAAjD,SAAS,GAAG,SAAqC;oBACjD,aAAW,eAAiB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;oBAEtD,IAAI,CAAC,MAAM,EAAE;wBACX,QAAQ,CAAC,QAAQ,CAAC,UAAQ,CAAC,CAAC;qBAC7B;oBAED,IAAI,WAAW,EAAE;wBACf,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;4BAC5D,MAAM,IAAI,KAAK,CAAC,qCAAmC,SAAW,CAAC,CAAC;yBACjE;wBAEK,OAAO,GAAG,mBAAc,CAAC,SAAS,CAAC,CAAC;wBACpC,GAAG,GAAG,cAAO,CAAC,OAAO,CAAC;6BACzB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;6BAChB,iBAAiB,EAAE,CAAC;wBAEnB,MAAM,GAAuB,SAAS,CAAC;wBAE3C,IAAI,GAAG,KAAK,MAAM,EAAE;4BAClB,MAAM,GAAG,UAAU,CAAC,UAAQ,CAAC,CAAC;yBAC/B;wBAED,IAAI,MAAM,EAAE;4BACV,kBAAa,CAAC,OAAO,EAAE,MAAM,EAAE;gCAC7B,QAAQ,EAAE,OAAO;6BAClB,CAAC,CAAC;4BAEH,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;yBACjD;6BAAM;4BACL,MAAM,IAAI,KAAK,CAAC,eAAa,GAAG,sBAAmB,CAAC,CAAC;yBACtD;qBACF;;;;oBAED,OAAO,CAAC,GAAG,CAAC,GAAC,CAAC,CAAC;oBACf,QAAQ,CAAC,KAAK,CAAC,GAAC,CAAC,CAAC;oBAClB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;oBAGlB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;;CACjB;AA5DD,4BA4DC","sourcesContent":["import * as isValidPath from 'is-valid-path';\nimport {writeFileSync} from 'fs';\nimport {extname} from 'path';\nimport {\n  coverage as calculateCoverage,\n  SchemaCoverage,\n} from '@graphql-inspector/core';\nimport {loadSchema, loadDocuments} from '@graphql-inspector/load';\n\nimport {ensureAbsolute} from '../utils/fs';\nimport {Renderer, ConsoleRenderer} from '../render';\n\nexport function outputJSON(coverage: SchemaCoverage): string {\n  return JSON.stringify(coverage, null, 2);\n}\n\nexport async function coverage(\n  documentsPointer: string,\n  schemaPointer: string,\n  options: {\n    require: string[];\n    write?: string;\n    silent?: boolean;\n    renderer?: Renderer;\n    headers?: Record<string, string>;\n  },\n) {\n  const renderer = options.renderer || new ConsoleRenderer();\n  const silent = options.silent === true;\n  const writePath = options.write;\n  const shouldWrite = typeof writePath !== 'undefined';\n\n  try {\n    const schema = await loadSchema(schemaPointer, {\n      headers: options.headers,\n    });\n    const documents = await loadDocuments(documentsPointer);\n    const coverage = calculateCoverage(schema, documents);\n\n    if (!silent) {\n      renderer.coverage(coverage);\n    }\n\n    if (shouldWrite) {\n      if (typeof writePath !== 'string' || !isValidPath(writePath)) {\n        throw new Error(`--write is not valid file path: ${writePath}`);\n      }\n\n      const absPath = ensureAbsolute(writePath);\n      const ext = extname(absPath)\n        .replace('.', '')\n        .toLocaleLowerCase();\n\n      let output: string | undefined = undefined;\n\n      if (ext === 'json') {\n        output = outputJSON(coverage);\n      }\n\n      if (output) {\n        writeFileSync(absPath, output, {\n          encoding: 'utf-8',\n        });\n\n        renderer.success('Available at', absPath, '\\n');\n      } else {\n        throw new Error(`Extension ${ext} is not supported`);\n      }\n    }\n  } catch (e) {\n    console.log(e);\n    renderer.error(e);\n    process.exit(1);\n  }\n\n  process.exit(0);\n}\n"]}