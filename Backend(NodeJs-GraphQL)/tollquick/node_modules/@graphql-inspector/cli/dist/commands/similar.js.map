{"version":3,"file":"similar.js","sourceRoot":"","sources":["../../src/commands/similar.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAA0B;AAE1B,sCAAyC;AACzC,2CAA6C;AAC7C,iCAAmC;AACnC,6BAA6B;AAC7B,yBAAiC;AACjC,gDAKiC;AACjC,gDAAmD;AAEnD,oCAAoD;AACpD,kCAA2C;AAE3C,SAAsB,OAAO,CAC3B,aAAqB,EACrB,IAAwB,EACxB,SAA6B,EAC7B,OAKC;;;;;;oBAEK,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,IAAI,wBAAe,EAAE,CAAC;oBACrD,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC;oBAC1B,WAAW,GAAG,OAAO,SAAS,KAAK,WAAW,CAAC;;;;oBAGpC,qBAAM,iBAAU,CAAC,aAAa,EAAE;4BAC7C,OAAO,EAAE,OAAO,CAAC,OAAO;yBACzB,CAAC,EAAA;;oBAFI,MAAM,GAAG,SAEb;oBACI,UAAU,GAAG,cAAW,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;oBAExD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE;wBACnC,QAAQ,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;qBACzC;yBAAM;wBACL,KAAW,QAAQ,IAAI,UAAU,EAAE;4BACjC,IAAI,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gCACjC,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;gCAC/B,MAAM,GAAG,oBAAa,CAAC,MAAM,CAAC,OAAO,CACzC,QAAQ,CACW,CAAC,CAAC;gCACjB,UAAU,GAAG,eAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCAClC,SAAO,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC;gCAE7C,QAAQ,CAAC,IAAI,EAAE,CAAC;gCAChB,QAAQ,CAAC,IAAI,CAAI,MAAM,SAAI,UAAY,CAAC,CAAC;gCACzC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAI,EAAE,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;gCAE3D,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK;oCAC3B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gCAChE,CAAC,CAAC,CAAC;6BACJ;yBACF;wBAED,IAAI,WAAW,EAAE;4BACf,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;gCAC5D,MAAM,IAAI,KAAK,CAAC,qCAAmC,SAAW,CAAC,CAAC;6BACjE;4BAEK,OAAO,GAAG,mBAAc,CAAC,SAAS,CAAC,CAAC;4BACpC,GAAG,GAAG,cAAO,CAAC,OAAO,CAAC;iCACzB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;iCAChB,iBAAiB,EAAE,CAAC;4BAEnB,MAAM,GAAuB,SAAS,CAAC;4BACrC,OAAO,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;4BAEzC,IAAI,GAAG,KAAK,MAAM,EAAE;gCAClB,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;6BAC9B;4BAED,IAAI,MAAM,EAAE;gCACV,kBAAa,CAAC,OAAO,EAAE,MAAM,EAAE;oCAC7B,QAAQ,EAAE,OAAO;iCAClB,CAAC,CAAC;gCAEH,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;6BACjD;iCAAM;gCACL,MAAM,IAAI,KAAK,CAAC,eAAa,GAAG,sBAAmB,CAAC,CAAC;6BACtD;yBACF;wBAED,QAAQ,CAAC,IAAI,EAAE,CAAC;qBACjB;;;;oBAED,QAAQ,CAAC,KAAK,CAAC,GAAC,CAAC,OAAO,IAAI,GAAC,CAAC,CAAC;oBAC/B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;oBAGlB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;;CACjB;AA/ED,0BA+EC;AAWD,SAAS,YAAY,CAAC,UAAsB;;IAC1C,IAAM,OAAO,GAAmB,EAAE,CAAC;IAEnC,KAAK,IAAM,QAAQ,IAAI,UAAU,EAAE;QACjC,IAAI,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YACvC,IAAM,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;YAEpC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;YAEvB,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;aAC1D;YAED,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,CAAA,KAAA,OAAO,CAAC,QAAQ,CAAC,CAAA,CAAC,IAAI,WAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;aAC/D;SACF;KACF;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,cAAc,CAAC,MAAc;IACpC,OAAO;QACL,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM;QAC9B,MAAM,EAAE,MAAM,CAAC,MAAM;KACtB,CAAC;AACJ,CAAC;AAED,SAAS,UAAU,CAAC,OAAuB;IACzC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACjC,CAAC;AAED,SAAS,WAAW,CAAC,IAAY,EAAE,MAAc;IAC/C,IAAM,UAAU,GAAG,eAAK,CAAC,IAAI,CAAC,MAAI,YAAY,CAAC,MAAM,CAAC,OAAI,CAAC,CAAC;IAE5D,OAAO,MAAM,CAAI,UAAU,CAAC,MAAM,CAAC,SAAI,UAAU,SAAI,IAAM,EAAE,CAAC,CAAC,CAAC;AAClE,CAAC;AAED,SAAS,UAAU,CAAC,KAAa;IAC/B,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;IAC3C,IAAM,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAEnC,OAAO,MAAM;SACV,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,UAAU,IAAI,KAAK,EAAnB,CAAmB,CAAC;SACjC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,eAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAvD,CAAuD,CAAC;SACvE,IAAI,CAAC,EAAE,CAAC,CAAC;AACd,CAAC;AAED,SAAS,YAAY,CAAC,KAAa;IACjC,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;AACjC,CAAC","sourcesContent":["import chalk from 'chalk';\nimport {GraphQLNamedType} from 'graphql';\nimport indent = require('indent-string');\nimport * as isValidPath from 'is-valid-path';\nimport * as figures from 'figures';\nimport {extname} from 'path';\nimport {writeFileSync} from 'fs';\nimport {\n  similar as findSimilar,\n  getTypePrefix,\n  SimilarMap,\n  Rating,\n} from '@graphql-inspector/core';\nimport {loadSchema} from '@graphql-inspector/load';\n\nimport {Renderer, ConsoleRenderer} from '../render';\nimport {ensureAbsolute} from '../utils/fs';\n\nexport async function similar(\n  schemaPointer: string,\n  name: string | undefined,\n  threshold: number | undefined,\n  options: {\n    require?: string[];\n    headers?: Record<string, string>;\n    write?: string;\n    renderer?: Renderer;\n  },\n) {\n  const renderer = options.renderer || new ConsoleRenderer();\n  const writePath = options.write;\n  const shouldWrite = typeof writePath !== 'undefined';\n\n  try {\n    const schema = await loadSchema(schemaPointer, {\n      headers: options.headers,\n    });\n    const similarMap = findSimilar(schema, name, threshold);\n\n    if (!Object.keys(similarMap).length) {\n      renderer.emit('No similar types found');\n    } else {\n      for (const typeName in similarMap) {\n        if (similarMap.hasOwnProperty(typeName)) {\n          const matches = similarMap[typeName];\n          const prefix = getTypePrefix(schema.getType(\n            typeName,\n          ) as GraphQLNamedType);\n          const sourceType = chalk.bold(typeName);\n          const name = matches.bestMatch.target.typeId;\n\n          renderer.emit();\n          renderer.emit(`${prefix} ${sourceType}`);\n          renderer.emit(printResult(name, matches.bestMatch.rating));\n\n          matches.ratings.forEach(match => {\n            renderer.emit(printResult(match.target.typeId, match.rating));\n          });\n        }\n      }\n\n      if (shouldWrite) {\n        if (typeof writePath !== 'string' || !isValidPath(writePath)) {\n          throw new Error(`--write is not valid file path: ${writePath}`);\n        }\n\n        const absPath = ensureAbsolute(writePath);\n        const ext = extname(absPath)\n          .replace('.', '')\n          .toLocaleLowerCase();\n\n        let output: string | undefined = undefined;\n        const results = transformMap(similarMap);\n\n        if (ext === 'json') {\n          output = outputJSON(results);\n        }\n\n        if (output) {\n          writeFileSync(absPath, output, {\n            encoding: 'utf-8',\n          });\n\n          renderer.success('Available at', absPath, '\\n');\n        } else {\n          throw new Error(`Extension ${ext} is not supported`);\n        }\n      }\n\n      renderer.emit();\n    }\n  } catch (e) {\n    renderer.error(e.message || e);\n    process.exit(1);\n  }\n\n  process.exit(0);\n}\n\ninterface SimilarRecord {\n  typename: string;\n  rating: number;\n}\n\ninterface SimilarResults {\n  [typename: string]: SimilarRecord[];\n}\n\nfunction transformMap(similarMap: SimilarMap): SimilarResults {\n  const results: SimilarResults = {};\n\n  for (const typename in similarMap) {\n    if (similarMap.hasOwnProperty(typename)) {\n      const result = similarMap[typename];\n\n      results[typename] = [];\n\n      if (result.bestMatch) {\n        results[typename].push(trasformResult(result.bestMatch));\n      }\n\n      if (result.ratings) {\n        results[typename].push(...result.ratings.map(trasformResult));\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction trasformResult(record: Rating): SimilarRecord {\n  return {\n    typename: record.target.typeId,\n    rating: record.rating,\n  };\n}\n\nfunction outputJSON(results: SimilarResults): string {\n  return JSON.stringify(results);\n}\n\nfunction printResult(name: string, rating: number): string {\n  const percentage = chalk.grey(`(${formatRating(rating)}%)`);\n\n  return indent(`${printScale(rating)} ${percentage} ${name}`, 0);\n}\n\nfunction printScale(ratio: number): string {\n  const percentage = Math.floor(ratio * 100);\n  const levels = [0, 30, 50, 70, 90];\n\n  return levels\n    .map(level => percentage >= level)\n    .map(enabled => (enabled ? figures.bullet : chalk.gray(figures.bullet)))\n    .join('');\n}\n\nfunction formatRating(ratio: number): number {\n  return Math.floor(ratio * 100);\n}\n"]}