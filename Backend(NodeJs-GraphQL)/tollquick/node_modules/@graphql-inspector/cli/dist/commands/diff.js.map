{"version":3,"file":"diff.js","sourceRoot":"","sources":["../../src/commands/diff.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAIiC;AACjC,gDAAmD;AAEnD,oCAAkE;AAElE,SAAS,WAAW,CAAC,OAAiB;IACpC,OAAO,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,CAAC,KAAK,KAAK,uBAAgB,CAAC,QAAQ,EAAjD,CAAiD,CAAC,CAAC;AAC9E,CAAC;AAED,SAAsB,IAAI,CACxB,gBAAwB,EACxB,gBAAwB,EACxB,OAKC;;;;;;oBAEK,QAAQ,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,wBAAe,EAAE,CAAC;;;;oBAGpD,qBAAM,iBAAU,CAAC,gBAAgB,EAAE;4BACnD,KAAK,EAAE,OAAO,CAAC,KAAK;4BACpB,OAAO,EAAE,OAAO,CAAC,OAAO;yBACzB,CAAC,EAAA;;oBAHI,SAAS,GAAG,SAGhB;oBACgB,qBAAM,iBAAU,CAAC,gBAAgB,EAAE;4BACnD,KAAK,EAAE,OAAO,CAAC,KAAK;4BACpB,OAAO,EAAE,OAAO,CAAC,OAAO;yBACzB,CAAC,EAAA;;oBAHI,SAAS,GAAG,SAGhB;oBAEI,OAAO,GAAG,WAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;oBAEjD,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;wBACnB,QAAQ,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;qBACzC;yBAAM;wBACL,QAAQ,CAAC,IAAI,CACX,uCACE,OAAO,CAAC,MAAM,yBACM,CACvB,CAAC;wBAEF,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;4BACpB,QAAQ,CAAC,IAAI,OAAb,QAAQ,EAAS,qBAAY,CAAC,MAAM,CAAC,EAAE;wBACzC,CAAC,CAAC,CAAC;wBAEH,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE;4BAClB,aAAa,GAAG,OAAO,CAAC,MAAM,CAClC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,CAAC,KAAK,KAAK,uBAAgB,CAAC,QAAQ,EAAjD,CAAiD,CACvD,CAAC,MAAM,CAAC;4BAET,QAAQ,CAAC,KAAK,CACZ,cAAY,aAAa,yBACvB,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,QAC1B,CACL,CAAC;4BACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBACjB;6BAAM;4BACL,QAAQ,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;yBACpD;qBACF;;;;oBAED,QAAQ,CAAC,KAAK,CAAC,GAAC,CAAC,OAAO,IAAI,GAAC,CAAC,CAAC;oBAC/B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;oBAGlB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;;CACjB;AA1DD,oBA0DC","sourcesContent":["import {\n  diff as diffSchema,\n  Change,\n  CriticalityLevel,\n} from '@graphql-inspector/core';\nimport {loadSchema} from '@graphql-inspector/load';\n\nimport {renderChange, Renderer, ConsoleRenderer} from '../render';\n\nfunction hasBreaking(changes: Change[]): boolean {\n  return changes.some(c => c.criticality.level === CriticalityLevel.Breaking);\n}\n\nexport async function diff(\n  oldSchemaPointer: string,\n  newSchemaPointer: string,\n  options: {\n    token?: string;\n    renderer?: Renderer;\n    require?: string[];\n    headers?: Record<string, string>;\n  },\n) {\n  const renderer = (options && options.renderer) || new ConsoleRenderer();\n\n  try {\n    const oldSchema = await loadSchema(oldSchemaPointer, {\n      token: options.token,\n      headers: options.headers,\n    });\n    const newSchema = await loadSchema(newSchemaPointer, {\n      token: options.token,\n      headers: options.headers,\n    });\n\n    const changes = diffSchema(oldSchema, newSchema);\n\n    if (!changes.length) {\n      renderer.success('No changes detected');\n    } else {\n      renderer.emit(\n        `\\nDetected the following changes (${\n          changes.length\n        }) between schemas:\\n`,\n      );\n\n      changes.forEach(change => {\n        renderer.emit(...renderChange(change));\n      });\n\n      if (hasBreaking(changes)) {\n        const breakingCount = changes.filter(\n          c => c.criticality.level === CriticalityLevel.Breaking,\n        ).length;\n\n        renderer.error(\n          `Detected ${breakingCount} breaking change${\n            breakingCount > 1 ? 's' : ''\n          }\\n`,\n        );\n        process.exit(1);\n      } else {\n        renderer.success('No breaking changes detected\\n');\n      }\n    }\n  } catch (e) {\n    renderer.error(e.message || e);\n    process.exit(1);\n  }\n\n  process.exit(0);\n}\n"]}