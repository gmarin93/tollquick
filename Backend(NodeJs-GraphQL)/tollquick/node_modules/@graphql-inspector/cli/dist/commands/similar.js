"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var indent = require("indent-string");
var isValidPath = require("is-valid-path");
var figures = require("figures");
var path_1 = require("path");
var fs_1 = require("fs");
var core_1 = require("@graphql-inspector/core");
var load_1 = require("@graphql-inspector/load");
var render_1 = require("../render");
var fs_2 = require("../utils/fs");
function similar(schemaPointer, name, threshold, options) {
    return __awaiter(this, void 0, void 0, function () {
        var renderer, writePath, shouldWrite, schema, similarMap, typeName, matches, prefix, sourceType, name_1, absPath, ext, output, results, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    renderer = options.renderer || new render_1.ConsoleRenderer();
                    writePath = options.write;
                    shouldWrite = typeof writePath !== 'undefined';
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, load_1.loadSchema(schemaPointer, {
                            headers: options.headers,
                        })];
                case 2:
                    schema = _a.sent();
                    similarMap = core_1.similar(schema, name, threshold);
                    if (!Object.keys(similarMap).length) {
                        renderer.emit('No similar types found');
                    }
                    else {
                        for (typeName in similarMap) {
                            if (similarMap.hasOwnProperty(typeName)) {
                                matches = similarMap[typeName];
                                prefix = core_1.getTypePrefix(schema.getType(typeName));
                                sourceType = chalk_1.default.bold(typeName);
                                name_1 = matches.bestMatch.target.typeId;
                                renderer.emit();
                                renderer.emit(prefix + " " + sourceType);
                                renderer.emit(printResult(name_1, matches.bestMatch.rating));
                                matches.ratings.forEach(function (match) {
                                    renderer.emit(printResult(match.target.typeId, match.rating));
                                });
                            }
                        }
                        if (shouldWrite) {
                            if (typeof writePath !== 'string' || !isValidPath(writePath)) {
                                throw new Error("--write is not valid file path: " + writePath);
                            }
                            absPath = fs_2.ensureAbsolute(writePath);
                            ext = path_1.extname(absPath)
                                .replace('.', '')
                                .toLocaleLowerCase();
                            output = undefined;
                            results = transformMap(similarMap);
                            if (ext === 'json') {
                                output = outputJSON(results);
                            }
                            if (output) {
                                fs_1.writeFileSync(absPath, output, {
                                    encoding: 'utf-8',
                                });
                                renderer.success('Available at', absPath, '\n');
                            }
                            else {
                                throw new Error("Extension " + ext + " is not supported");
                            }
                        }
                        renderer.emit();
                    }
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    renderer.error(e_1.message || e_1);
                    process.exit(1);
                    return [3 /*break*/, 4];
                case 4:
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
exports.similar = similar;
function transformMap(similarMap) {
    var _a;
    var results = {};
    for (var typename in similarMap) {
        if (similarMap.hasOwnProperty(typename)) {
            var result = similarMap[typename];
            results[typename] = [];
            if (result.bestMatch) {
                results[typename].push(trasformResult(result.bestMatch));
            }
            if (result.ratings) {
                (_a = results[typename]).push.apply(_a, result.ratings.map(trasformResult));
            }
        }
    }
    return results;
}
function trasformResult(record) {
    return {
        typename: record.target.typeId,
        rating: record.rating,
    };
}
function outputJSON(results) {
    return JSON.stringify(results);
}
function printResult(name, rating) {
    var percentage = chalk_1.default.grey("(" + formatRating(rating) + "%)");
    return indent(printScale(rating) + " " + percentage + " " + name, 0);
}
function printScale(ratio) {
    var percentage = Math.floor(ratio * 100);
    var levels = [0, 30, 50, 70, 90];
    return levels
        .map(function (level) { return percentage >= level; })
        .map(function (enabled) { return (enabled ? figures.bullet : chalk_1.default.gray(figures.bullet)); })
        .join('');
}
function formatRating(ratio) {
    return Math.floor(ratio * 100);
}
//# sourceMappingURL=similar.js.map