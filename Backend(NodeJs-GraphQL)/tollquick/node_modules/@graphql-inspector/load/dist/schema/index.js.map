{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/schema/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAA8E;AAC9E,mDAAwD;AAExD,6CAAyC;AACzC,uCAAmC;AAEnC,SAAsB,UAAU,CAC9B,OAAe,EACf,KAAW;;;;;;oBAEL,SAAS,GAAG,wBAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBAE7C,IAAI,SAAS,EAAE;wBACb,sBAAO,SAAS,EAAE,EAAC;qBACpB;oBAEK,MAAM,GAAG,kBAAO,CAAC,OAAO,CAAC,CAAC;oBAEhC,IAAI,MAAM,EAAE;wBACV,sBAAO,MAAM,EAAE,EAAC;qBACjB;oBAEgB,qBAAM,4BAAS,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE,CAAC,EAAA;;oBAAhD,QAAQ,GAAG,SAAqC;oBAEtD,IAAI,kBAAQ,CAAC,QAAQ,CAAC,EAAE;wBACtB,sBAAO,QAAQ,EAAC;qBACjB;oBAED,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE;wBAC5B,sBAAO,wBAAc,CAAC,QAAQ,CAAC,EAAC;qBACjC;oBAED,MAAM,IAAI,KAAK,CAAC,qBAAmB,OAAS,CAAC,CAAC;;;;CAC/C;AA3BD,gCA2BC;AAED,SAAS,cAAc,CAAC,GAAQ;IAC9B,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;AACpB,CAAC","sourcesContent":["import {GraphQLSchema, isSchema, DocumentNode, buildASTSchema} from 'graphql';\nimport {loadSchema as useSchema} from 'graphql-toolkit';\n\nimport {fromGithub} from './from-github';\nimport {fromGit} from './from-git';\n\nexport async function loadSchema(\n  pointer: string,\n  extra?: any,\n): Promise<GraphQLSchema> {\n  const useGithub = fromGithub(pointer, extra);\n\n  if (useGithub) {\n    return useGithub();\n  }\n\n  const useGit = fromGit(pointer);\n\n  if (useGit) {\n    return useGit();\n  }\n\n  const resolved = await useSchema(pointer, extra || {});\n\n  if (isSchema(resolved)) {\n    return resolved;\n  }\n\n  if (isDocumentNode(resolved)) {\n    return buildASTSchema(resolved);\n  }\n\n  throw new Error(`Couldn't handle ${pointer}`);\n}\n\nfunction isDocumentNode(doc: any): doc is DocumentNode {\n  return !!doc.kind;\n}\n"]}