"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = require("node-fetch");
var graphql_1 = require("graphql");
function isGithub(pointer) {
    return pointer.toLowerCase().startsWith('github:');
}
// github:owner/name#ref:path/to/file
function extractData(pointer) {
    var _a = pointer.split('#'), repo = _a[0], file = _a[1];
    var _b = repo.split(':')[1].split('/'), owner = _b[0], name = _b[1];
    var _c = file.split(':'), ref = _c[0], path = _c[1];
    return {
        owner: owner,
        name: name,
        ref: ref,
        path: path,
    };
}
exports.fromGithub = function fromGithub(pointer, options) {
    if (isGithub(pointer)) {
        return function load() {
            return __awaiter(this, void 0, void 0, function () {
                var _a, owner, name, ref, path, request, response, errorMessage, text;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = extractData(pointer), owner = _a.owner, name = _a.name, ref = _a.ref, path = _a.path;
                            return [4 /*yield*/, node_fetch_1.default('https://api.github.com/graphql', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json; charset=utf-8',
                                        Authorization: "bearer " + options.token,
                                    },
                                    body: JSON.stringify({
                                        query: "\n            query GetGraphQLSchemaForGraphQLInspector($owner: String!, $name: String!, $expression: String!) {\n              repository(owner: $owner, name: $name) {\n                object(expression: $expression) {\n                  ... on Blob {\n                    text\n                  }\n                }\n              }\n            }\n          ",
                                        variables: {
                                            owner: owner,
                                            name: name,
                                            expression: ref + ':' + path,
                                        },
                                        operationName: 'GetGraphQLSchemaForGraphQLInspector',
                                    }),
                                })];
                        case 1:
                            request = _b.sent();
                            return [4 /*yield*/, request.json()];
                        case 2:
                            response = _b.sent();
                            errorMessage = null;
                            if (response.errors && response.errors.length > 0) {
                                errorMessage = response.errors
                                    .map(function (item) { return item.message; })
                                    .join(', ');
                            }
                            else if (!response.data) {
                                errorMessage = response;
                            }
                            if (errorMessage) {
                                throw new Error('Unable to download schema from github: ' + errorMessage);
                            }
                            text = response.data.repository.object.text;
                            if (/\.(gql|graphql)$/i.test(path)) {
                                return [2 /*return*/, graphql_1.buildSchema(text)];
                            }
                            else if (/\.json$/i.test(path)) {
                                return [2 /*return*/, graphql_1.buildClientSchema(JSON.parse(text))];
                            }
                            throw new Error('Unable to build schema from github');
                    }
                });
            });
        };
    }
};
//# sourceMappingURL=from-github.js.map