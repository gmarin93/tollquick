{"version":3,"file":"from-github.js","sourceRoot":"","sources":["../../src/schema/from-github.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA+B;AAC/B,mCAAuD;AAIvD,SAAS,QAAQ,CAAC,OAAe;IAC/B,OAAO,OAAO,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;AACrD,CAAC;AAED,qCAAqC;AACrC,SAAS,WAAW,CAClB,OAAe;IAOT,IAAA,uBAAiC,EAAhC,YAAI,EAAE,YAA0B,CAAC;IAClC,IAAA,kCAA6C,EAA5C,aAAK,EAAE,YAAqC,CAAC;IAC9C,IAAA,oBAA6B,EAA5B,WAAG,EAAE,YAAuB,CAAC;IAEpC,OAAO;QACL,KAAK,OAAA;QACL,IAAI,MAAA;QACJ,GAAG,KAAA;QACH,IAAI,MAAA;KACL,CAAC;AACJ,CAAC;AAEY,QAAA,UAAU,GAAkB,SAAS,UAAU,CAC1D,OAAO,EACP,OAEC;IAED,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;QACrB,OAAO,SAAe,IAAI;;;;;;4BAClB,KAA2B,WAAW,CAAC,OAAO,CAAC,EAA9C,KAAK,WAAA,EAAE,IAAI,UAAA,EAAE,GAAG,SAAA,EAAE,IAAI,UAAA,CAAyB;4BACtC,qBAAM,oBAAK,CAAC,gCAAgC,EAAE;oCAC5D,MAAM,EAAE,MAAM;oCACd,OAAO,EAAE;wCACP,cAAc,EAAE,iCAAiC;wCACjD,aAAa,EAAE,YAAU,OAAO,CAAC,KAAO;qCACzC;oCACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wCACnB,KAAK,EAAE,4WAUN;wCACD,SAAS,EAAE;4CACT,KAAK,OAAA;4CACL,IAAI,MAAA;4CACJ,UAAU,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI;yCAC7B;wCACD,aAAa,EAAE,qCAAqC;qCACrD,CAAC;iCACH,CAAC,EAAA;;4BAzBI,OAAO,GAAG,SAyBd;4BACe,qBAAM,OAAO,CAAC,IAAI,EAAE,EAAA;;4BAA/B,QAAQ,GAAG,SAAoB;4BAEjC,YAAY,GAAkB,IAAI,CAAC;4BAEvC,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gCACjD,YAAY,GAAG,QAAQ,CAAC,MAAM;qCAC3B,GAAG,CAAC,UAAC,IAAW,IAAK,OAAA,IAAI,CAAC,OAAO,EAAZ,CAAY,CAAC;qCAClC,IAAI,CAAC,IAAI,CAAC,CAAC;6BACf;iCAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;gCACzB,YAAY,GAAG,QAAQ,CAAC;6BACzB;4BAED,IAAI,YAAY,EAAE;gCAChB,MAAM,IAAI,KAAK,CACb,yCAAyC,GAAG,YAAY,CACzD,CAAC;6BACH;4BAEK,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC;4BAElD,IAAI,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gCAClC,sBAAO,qBAAW,CAAC,IAAI,CAAC,EAAC;6BAC1B;iCAAM,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gCAChC,sBAAO,2BAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAC;6BAC5C;4BAED,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;;;;SACvD,CAAC;KACH;AACH,CAAC,CAAC","sourcesContent":["import fetch from 'node-fetch';\nimport {buildClientSchema, buildSchema} from 'graphql';\n\nimport {SchemaHandler} from './loader';\n\nfunction isGithub(pointer: string): boolean {\n  return pointer.toLowerCase().startsWith('github:');\n}\n\n// github:owner/name#ref:path/to/file\nfunction extractData(\n  pointer: string,\n): {\n  owner: string;\n  name: string;\n  ref: string;\n  path: string;\n} {\n  const [repo, file] = pointer.split('#');\n  const [owner, name] = repo.split(':')[1].split('/');\n  const [ref, path] = file.split(':');\n\n  return {\n    owner,\n    name,\n    ref,\n    path,\n  };\n}\n\nexport const fromGithub: SchemaHandler = function fromGithub(\n  pointer,\n  options: {\n    token: string;\n  },\n) {\n  if (isGithub(pointer)) {\n    return async function load() {\n      const {owner, name, ref, path} = extractData(pointer);\n      const request = await fetch('https://api.github.com/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          Authorization: `bearer ${options.token}`,\n        },\n        body: JSON.stringify({\n          query: `\n            query GetGraphQLSchemaForGraphQLInspector($owner: String!, $name: String!, $expression: String!) {\n              repository(owner: $owner, name: $name) {\n                object(expression: $expression) {\n                  ... on Blob {\n                    text\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            owner,\n            name,\n            expression: ref + ':' + path,\n          },\n          operationName: 'GetGraphQLSchemaForGraphQLInspector',\n        }),\n      });\n      const response = await request.json();\n\n      let errorMessage: string | null = null;\n\n      if (response.errors && response.errors.length > 0) {\n        errorMessage = response.errors\n          .map((item: Error) => item.message)\n          .join(', ');\n      } else if (!response.data) {\n        errorMessage = response;\n      }\n\n      if (errorMessage) {\n        throw new Error(\n          'Unable to download schema from github: ' + errorMessage,\n        );\n      }\n\n      const text = response.data.repository.object.text;\n\n      if (/\\.(gql|graphql)$/i.test(path)) {\n        return buildSchema(text);\n      } else if (/\\.json$/i.test(path)) {\n        return buildClientSchema(JSON.parse(text));\n      }\n\n      throw new Error('Unable to build schema from github');\n    };\n  }\n};\n"]}