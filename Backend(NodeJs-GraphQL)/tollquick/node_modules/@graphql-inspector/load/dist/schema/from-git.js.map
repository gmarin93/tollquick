{"version":3,"file":"from-git.js","sourceRoot":"","sources":["../../src/schema/from-git.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAgD;AAChD,mCAAoC;AAIpC,SAAS,KAAK,CAAC,OAAe;IAC5B,OAAO,OAAO,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAClD,CAAC;AAED,0BAA0B;AAC1B,SAAS,WAAW,CAClB,OAAe;IAKf,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAExD,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QAChC,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAC;KACH;IAED,OAAO;QACL,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;QACb,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;KACf,CAAC;AACJ,CAAC;AAEY,QAAA,OAAO,GAAkB,SAAS,OAAO,CAAC,OAAO;IAC5D,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;QAClB,OAAO,SAAe,IAAI;;;;;;4BAClB,KAAc,WAAW,CAAC,OAAO,CAAC,EAAjC,GAAG,SAAA,EAAE,IAAI,UAAA,CAAyB;4BACnC,GAAG,GAAG,SAAS,EAAE,CAAC;;;;4BAKP,qBAAM,GAAG,CAAC,IAAI,CAAC,CAAI,GAAG,SAAI,IAAM,CAAC,CAAC,EAAA;;4BAAjD,YAAY,GAAG,SAAkC,CAAC;;;;4BAElD,MAAM,IAAI,KAAK,CAAC,kCAAkC,GAAG,OAAK,CAAC,CAAC;;4BAG9D,IAAI,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gCAClC,sBAAO,qBAAW,CAAC,YAAY,CAAC,EAAC;6BAClC;4BAED,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;;;;SACpD,CAAC;KACH;AACH,CAAC,CAAC","sourcesContent":["import * as simplegit from 'simple-git/promise';\nimport {buildSchema} from 'graphql';\n\nimport {SchemaHandler} from './loader';\n\nfunction isGit(pointer: string): boolean {\n  return pointer.toLowerCase().startsWith('git:');\n}\n\n// git:branch:path/to/file\nfunction extractData(\n  pointer: string,\n): {\n  ref: string;\n  path: string;\n} {\n  const parts = pointer.replace(/^git\\:/i, '').split(':');\n\n  if (!parts || parts.length !== 2) {\n    throw new Error(\n      'Schema pointer should match \"git:branchName:path/to/file\"',\n    );\n  }\n\n  return {\n    ref: parts[0],\n    path: parts[1],\n  };\n}\n\nexport const fromGit: SchemaHandler = function fromGit(pointer) {\n  if (isGit(pointer)) {\n    return async function load() {\n      const {ref, path} = extractData(pointer);\n      const git = simplegit();\n\n      let schemaString: string;\n\n      try {\n        schemaString = await git.show([`${ref}:${path}`]);\n      } catch (error) {\n        throw new Error('Unable to load schema from git: ' + error);\n      }\n\n      if (/\\.(gql|graphql)$/i.test(path)) {\n        return buildSchema(schemaString);\n      }\n\n      throw new Error('Unable to build schema from git');\n    };\n  }\n};\n"]}