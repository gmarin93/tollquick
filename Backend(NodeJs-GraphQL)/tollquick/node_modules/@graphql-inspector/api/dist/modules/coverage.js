"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@graphql-inspector/core");
var load_1 = require("@graphql-inspector/load");
var graphql_tag_1 = require("graphql-tag");
exports.typeDefs = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type Location {\n    start: Int!\n    end: Int!\n  }\n\n  type DocumentLocation {\n    name: String!\n    locations: [Location!]\n  }\n\n  type TypeChildCoverage {\n    name: String!\n    hits: Int!\n    locations: [DocumentLocation!]\n  }\n\n  type TypeCoverage {\n    name: String!\n    hits: Int!\n    # type: GraphQLNamedType; TODO: define that\n    children: [TypeChildCoverage!]\n  }\n\n  type SchemaCoverage {\n    sources: [DocumentSource!]\n    types: [TypeCoverage!]\n  }\n\n  extend type Query {\n    coverage(schema: String!, documents: String!): SchemaCoverage!\n  }\n"], ["\n  type Location {\n    start: Int!\n    end: Int!\n  }\n\n  type DocumentLocation {\n    name: String!\n    locations: [Location!]\n  }\n\n  type TypeChildCoverage {\n    name: String!\n    hits: Int!\n    locations: [DocumentLocation!]\n  }\n\n  type TypeCoverage {\n    name: String!\n    hits: Int!\n    # type: GraphQLNamedType; TODO: define that\n    children: [TypeChildCoverage!]\n  }\n\n  type SchemaCoverage {\n    sources: [DocumentSource!]\n    types: [TypeCoverage!]\n  }\n\n  extend type Query {\n    coverage(schema: String!, documents: String!): SchemaCoverage!\n  }\n"])));
var Query = {
    coverage: function (_, args) {
        return __awaiter(this, void 0, void 0, function () {
            var schema, documents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, load_1.loadSchema(args.schema)];
                    case 1:
                        schema = _a.sent();
                        return [4 /*yield*/, load_1.loadDocuments(args.documents)];
                    case 2:
                        documents = _a.sent();
                        return [2 /*return*/, core_1.coverage(schema, documents)];
                }
            });
        });
    },
};
var SchemaCoverage = {
    types: function (schemaCoverage) {
        return Object.keys(schemaCoverage.types).map(function (name) { return (__assign({ name: name }, schemaCoverage.types[name])); });
    },
};
var TypeCoverage = {
    children: function (typeCoverage) {
        return Object.keys(typeCoverage.children).map(function (name) { return (__assign({ name: name }, typeCoverage.children[name])); });
    },
};
var TypeChildCoverage = {
    locations: function (typeChildCoverage) {
        return Object.keys(typeChildCoverage.locations).map(function (name) { return ({
            name: name,
            locations: typeChildCoverage.locations[name],
        }); });
    },
};
exports.resolvers = {
    Query: Query,
    SchemaCoverage: SchemaCoverage,
    TypeCoverage: TypeCoverage,
    TypeChildCoverage: TypeChildCoverage,
};
var templateObject_1;
//# sourceMappingURL=coverage.js.map