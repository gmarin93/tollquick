{"version":3,"file":"similar.js","sourceRoot":"","sources":["../../src/modules/similar.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAgD;AAChD,gDAAmD;AACnD,2CAA8B;AAIjB,QAAA,QAAQ,GAAG,qBAAG,2XAAA,wTAgB1B,KAAC;AAEF,IAAM,KAAK,GAA6B;IAChC,OAAO,EAAb,UAAc,CAAC,EAAE,IAAI;;;;;4BACJ,qBAAM,iBAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAA;;wBAAtC,MAAM,GAAG,SAA6B;wBACzB,qBAAM,cAAO,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,SAAgB,CAAC,EAAA;;wBAApE,UAAU,GAAG,SAAuD;wBAE1E,sBAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,YACzC,IAAI,MAAA,IACD,UAAU,CAAC,IAAI,CAAC,EACnB,EAHyC,CAGzC,CAAC,EAAC;;;;KACL;IACK,SAAS,EAAf,UAAgB,CAAC,EAAE,IAAI;;;;;4BACN,qBAAM,iBAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAA;;wBAAtC,MAAM,GAAG,SAA6B;wBACzB,qBAAM,cAAO,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAgB,CAAC,EAAA;;wBAApE,UAAU,GAAG,SAAuD;wBAE1E,iCACE,IAAI,EAAE,IAAI,CAAC,IAAI,IACZ,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GACxB;;;;KACH;CACF,CAAC;AAEF,IAAM,OAAO,GAA+B;IAC1C,IAAI,YAAC,MAAM;QACT,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM;YACpC,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,MAAM;SAChC,CAAC;IACJ,CAAC;IACD,KAAK,YAAC,MAAM;QACV,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC;YAClC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM;YACzB,MAAM,EAAE,KAAK,CAAC,MAAM;SACrB,CAAC,EAHiC,CAGjC,CAAC,CAAC;IACN,CAAC;CACF,CAAC;AAEW,QAAA,SAAS,GAAG;IACvB,KAAK,OAAA;IACL,OAAO,SAAA;CACR,CAAC","sourcesContent":["import {similar} from '@graphql-inspector/core';\nimport {loadSchema} from '@graphql-inspector/load';\nimport gql from 'graphql-tag';\n\nimport {QueryResolvers, SimilarResolvers} from '../generated/graphql';\n\nexport const typeDefs = gql`\n  type Match {\n    name: String!\n    rating: Float!\n  }\n\n  type Similar {\n    name: String!\n    best: Match!\n    types: [Match!]\n  }\n\n  extend type Query {\n    similar(schema: String!, threshold: Float): [Similar!]\n    similarTo(schema: String!, name: String!, threshold: Float): Similar!\n  }\n`;\n\nconst Query: QueryResolvers.Resolvers = {\n  async similar(_, args) {\n    const schema = await loadSchema(args.schema);\n    const similarMap = await similar(schema, undefined, args.threshold as any);\n\n    return Object.keys(similarMap).map(name => ({\n      name,\n      ...similarMap[name],\n    }));\n  },\n  async similarTo(_, args) {\n    const schema = await loadSchema(args.schema);\n    const similarMap = await similar(schema, args.name, args.threshold as any);\n\n    return {\n      name: args.name,\n      ...similarMap[args.name],\n    };\n  },\n};\n\nconst Similar: SimilarResolvers.Resolvers = {\n  best(parent) {\n    return {\n      name: parent.bestMatch.target.typeId,\n      rating: parent.bestMatch.rating,\n    };\n  },\n  types(parent) {\n    return parent.ratings.map(match => ({\n      name: match.target.typeId,\n      rating: match.rating,\n    }));\n  },\n};\n\nexport const resolvers = {\n  Query,\n  Similar,\n};\n"]}