{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../src/modules/validate.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAiD;AACjD,gDAAkE;AAClE,2CAA8B;AAIjB,QAAA,QAAQ,GAAG,qBAAG,qQAAA,kMAS1B,KAAC;AAEF,IAAM,KAAK,GAA6B;IAChC,QAAQ,YAAC,CAAC,EAAE,IAAI;;;;;4BACQ,qBAAM,OAAO,CAAC,GAAG,CAAC;4BAC5C,iBAAU,CAAC,IAAI,CAAC,MAAM,CAAC;4BACvB,oBAAa,CAAC,IAAI,CAAC,SAAS,CAAC;yBAC9B,CAAC,EAAA;;wBAHI,KAAsB,SAG1B,EAHK,MAAM,QAAA,EAAE,SAAS,QAAA;wBAKxB,sBAAO,eAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,EAAC;;;;KACpC;CACF,CAAC;AAEF,IAAM,eAAe,GAAuC;IAC1D,MAAM,YAAC,GAAG;QACR,IAAI,GAAG,CAAC,MAAM,EAAE;YACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC;gBAC9B,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,SAAS,EAAE,KAAK,CAAC,SAAS;aAC3B,CAAC,EAJ6B,CAI7B,CAAC,CAAC;SACL;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAC;AAEW,QAAA,SAAS,GAAG;IACvB,KAAK,OAAA;IACL,eAAe,iBAAA;CAChB,CAAC","sourcesContent":["import {validate} from '@graphql-inspector/core';\nimport {loadSchema, loadDocuments} from '@graphql-inspector/load';\nimport gql from 'graphql-tag';\n\nimport {QueryResolvers, InvalidDocumentResolvers} from '../generated/graphql';\n\nexport const typeDefs = gql`\n  type InvalidDocument {\n    source: DocumentSource!\n    errors: [GraphQLError!]\n  }\n\n  extend type Query {\n    validate(schema: String!, documents: String!): [InvalidDocument!]\n  }\n`;\n\nconst Query: QueryResolvers.Resolvers = {\n  async validate(_, args) {\n    const [schema, documents] = await Promise.all([\n      loadSchema(args.schema),\n      loadDocuments(args.documents),\n    ]);\n\n    return validate(schema, documents);\n  },\n};\n\nconst InvalidDocument: InvalidDocumentResolvers.Resolvers = {\n  errors(doc) {\n    if (doc.errors) {\n      return doc.errors.map(error => ({\n        message: error.message,\n        locations: error.locations,\n        positions: error.positions,\n      }));\n    }\n\n    return null;\n  },\n};\n\nexport const resolvers = {\n  Query,\n  InvalidDocument,\n};\n"]}