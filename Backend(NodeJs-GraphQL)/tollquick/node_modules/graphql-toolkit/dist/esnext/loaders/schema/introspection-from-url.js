import { fetch } from 'cross-fetch';
import { introspectionQuery, buildClientSchema } from 'graphql';
import { isUri } from 'valid-url';
export class IntrospectionFromUrlLoader {
    canHandle(pointerToSchema) {
        return !!isUri(pointerToSchema);
    }
    async handle(url, schemaOptions) {
        let headers = {};
        if (schemaOptions) {
            if (Array.isArray(schemaOptions.headers)) {
                headers = schemaOptions.headers.reduce((prev, v) => ({ ...prev, ...v }), {});
            }
            else if (typeof schemaOptions.headers === 'object') {
                headers = schemaOptions.headers;
            }
        }
        let extraHeaders = {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            ...headers,
        };
        const response = await fetch(url, {
            method: 'POST',
            body: JSON.stringify({
                query: introspectionQuery,
            }),
            headers: extraHeaders,
        });
        const body = await response.json();
        let errorMessage;
        if (body.errors && body.errors.length > 0) {
            errorMessage = body.errors.map((item) => item.message).join(', ');
        }
        else if (!body.data) {
            errorMessage = body;
        }
        if (errorMessage) {
            throw ('Unable to download schema from remote: ' + errorMessage);
        }
        if (!body.data.__schema) {
            throw new Error('Invalid schema provided!');
        }
        return buildClientSchema(body.data);
    }
}
//# sourceMappingURL=introspection-from-url.js.map