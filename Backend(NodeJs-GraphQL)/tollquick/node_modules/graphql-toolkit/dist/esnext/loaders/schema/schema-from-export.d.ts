import { DocumentNode, GraphQLSchema, IntrospectionQuery } from 'graphql';
import { SchemaLoader } from './schema-loader';
export declare class SchemaFromExport implements SchemaLoader {
    static getFiles(globOrValidPath: string): string[];
    resolveExports(file: string): Promise<{
        ok: boolean;
        export?: any;
    }>;
    canHandle(globOrValidPath: string): Promise<boolean>;
    handle(globOrValidPath: string, _options?: any): Promise<GraphQLSchema | DocumentNode>;
    isSchemaText(obj: any): obj is string;
    isWrappedSchemaJson(obj: any): obj is {
        data: IntrospectionQuery;
    };
    isSchemaJson(obj: any): obj is IntrospectionQuery;
    isSchemaObject(obj: any): obj is GraphQLSchema;
    isSchemaAst(obj: any): obj is DocumentNode;
    isPromise(obj: any): obj is Promise<any>;
    resolveSchema(schema: GraphQLSchema | DocumentNode | string | {
        data: IntrospectionQuery;
    } | IntrospectionQuery): Promise<DocumentNode | GraphQLSchema>;
}
