"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cross_fetch_1 = require("cross-fetch");
const graphql_1 = require("graphql");
const valid_url_1 = require("valid-url");
class IntrospectionFromUrlLoader {
    canHandle(pointerToSchema) {
        return !!valid_url_1.isUri(pointerToSchema);
    }
    async handle(url, schemaOptions) {
        let headers = {};
        if (schemaOptions) {
            if (Array.isArray(schemaOptions.headers)) {
                headers = schemaOptions.headers.reduce((prev, v) => ({ ...prev, ...v }), {});
            }
            else if (typeof schemaOptions.headers === 'object') {
                headers = schemaOptions.headers;
            }
        }
        let extraHeaders = {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            ...headers,
        };
        const response = await cross_fetch_1.fetch(url, {
            method: 'POST',
            body: JSON.stringify({
                query: graphql_1.introspectionQuery,
            }),
            headers: extraHeaders,
        });
        const body = await response.json();
        let errorMessage;
        if (body.errors && body.errors.length > 0) {
            errorMessage = body.errors.map((item) => item.message).join(', ');
        }
        else if (!body.data) {
            errorMessage = body;
        }
        if (errorMessage) {
            throw ('Unable to download schema from remote: ' + errorMessage);
        }
        if (!body.data.__schema) {
            throw new Error('Invalid schema provided!');
        }
        return graphql_1.buildClientSchema(body.data);
    }
}
exports.IntrospectionFromUrlLoader = IntrospectionFromUrlLoader;
//# sourceMappingURL=introspection-from-url.js.map